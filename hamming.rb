MATRICE = [
	[1, 0, 0, 0],
	[0, 1, 0, 0],
	[0, 0, 1, 0],
	[0, 0, 0, 1],
	[1, 1, 0, 1],
	[1, 0, 1, 1],
	[0, 1, 1, 1]]

MATRICE_ENCODAGE = [
	0x00,
	0x71,
	0x62,
	0x13,
	0x54,
	0x25,
	0x36,
	0x47,
	0x38,
	0x49,
	0x5A,
	0x2B,
	0x6C,
	0x1D,
	0x0E,
	0x7F]

MATRICE_DECODAGE = [
	0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x0E, 0x07,
	0x00, 0x09, 0x0E, 0x0B, 0x0E, 0x0D, 0x0E, 0x0E,
	0x00, 0x03, 0x03, 0x03, 0x04, 0x0D, 0x06, 0x03,
	0x08, 0x0D, 0x0A, 0x03, 0x0D, 0x0D, 0x0E, 0x0D,
	0x00, 0x05, 0x02, 0x0B, 0x05, 0x05, 0x06, 0x05,
	0x08, 0x0B, 0x0B, 0x0B, 0x0C, 0x05, 0x0E, 0x0B,
	0x08, 0x01, 0x06, 0x03, 0x06, 0x05, 0x06, 0x06,
	0x08, 0x08, 0x08, 0x0B, 0x08, 0x0D, 0x06, 0x0F,
	0x00, 0x09, 0x02, 0x07, 0x04, 0x07, 0x07, 0x07,
	0x09, 0x09, 0x0A, 0x09, 0x0C, 0x09, 0x0E, 0x07,
	0x04, 0x01, 0x0A, 0x03, 0x04, 0x04, 0x04, 0x07,
	0x0A, 0x09, 0x0A, 0x0A, 0x04, 0x0D, 0x0A, 0x0F,
	0x02, 0x01, 0x02, 0x02, 0x0C, 0x05, 0x02, 0x07,
	0x0C, 0x09, 0x02, 0x0B, 0x0C, 0x0C, 0x0C, 0x0F,
	0x01, 0x01, 0x02, 0x01, 0x04, 0x01, 0x06, 0x0F,
	0x08, 0x01, 0x0A, 0x0F, 0x0C, 0x0F, 0x0F, 0x0F]

#Encode une chaine de caractére contenant des 0 et des 1
def encode_bin_str (strToEncode)
	strToEncode.bytes.map{|i| encode_unsigned_byte(i)}.flatten.pack("c*")
end

#Decode une chaine de caractére contenant des 0 et des 1
def decode_bin_str (strToDecode)
	strToDecode.bytes.each_slice(2).map{|i| decode_unsigned_bytes(i)}.pack("c*")
end

def encode_unsigned_byte(byteToEncode)
	quartets = unsigned_byte_to_quartets(byteToEncode)
	quartets.map! {|i| encode_quartet(i)}
	quartets
end

def decode_unsigned_bytes(byteToEncode)
	quartets = byteToEncode.map {|i| decode_quartet(i)}
	retvalue = quartets_to_byte(quartets)
end

def unsigned_byte_to_quartets(byteToConvert)
	[(byteToConvert >> 4) & 0x0F, byteToConvert & 0x0F]
end

#Convertit deux quartets en un octet
def quartets_to_byte(quartetsToConvert)
	quartetsToConvert[1] | (quartetsToConvert[0] << 4)
end

#Decode une chaine de caractére contenant des 0 et des 1
def encode_quartet (quartetToEnccode)
	MATRICE_ENCODAGE[quartetToEnccode]
end

#Decode une chaine de caractére contenant des 0 et des 1
def decode_quartet (octetToDecode)
	if (not MATRICE_ENCODAGE.include?(octetToDecode))
		puts "Erreur detecté"
	end
	MATRICE_DECODAGE[octetToDecode & 0x7F]    
end
